{"version":3,"sources":["elements/buttons.jsx","elements/input-fields.jsx","elements/checkboxes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","state","react_default","a","createElement","style","this","props","css","backgroundColor","borderRadius","fontFamily","className","onClick","handleClick","name","map","call","document","querySelectorAll","el","MDCRipple","PureComponent","InputField","_this2","ref","node","input","type","text","MDCTextField","Component","Checkbox","id","viewBox","fill","d","MDCCheckbox","Login","_PureComponent","_getPrototypeOf2","_this","Object","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","apply","concat","console","log","emailLogin","value","password","inherits","createClass","key","input_fields","textDecoration","color","marginBottom","href","borderBottom","fontSize","react_router_dom","to","buttons","Signup","_PureComponent2","marginLeft","checkboxes","marginTop","Main","_PureComponent3","Boolean","window","location","hostname","match","ReactDOM","render","Fragment","react_router","path","component","exact","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.344ef282.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { MDCRipple } from \"@material/ripple\";\n\nclass Button extends PureComponent {\n  state = {};\n  render() {\n    return (\n      <div style={this.props.css}>\n        <button\n          style={{\n            backgroundColor: \"#377dff\",\n            borderRadius: 4,\n            fontFamily: \"Poppins\"\n          }}\n          className=\"mdc-button mdc-button--unelevated --mdc-theme-secondary\"\n          onClick={this.props.handleClick}\n        >\n          <span className=\"mdc-button__label\">{this.props.name}</span>\n        </button>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    [].map.call(document.querySelectorAll(\".mdc-button\"), function(el) {\n      return new MDCRipple(el);\n    });\n  }\n}\n\nexport default Button;\n","import React, { Component } from \"react\";\nimport { MDCTextField } from \"@material/textfield\";\n\nclass InputField extends Component {\n  state = {};\n  render() {\n    return (\n      <div>\n        <div className=\"mdc-text-field mdc-text-field--outlined mdc-theme--secondary\">\n          <input\n            ref={node => {\n              this.input = node;\n            }}\n            type={this.props.type}\n            className=\"mdc-text-field__input\"\n          />\n          <div className=\"mdc-notched-outline\">\n            <div className=\"mdc-notched-outline__leading\" />\n            <div className=\"mdc-notched-outline__notch\">\n              <label className=\"mdc-floating-label\">{this.props.text}</label>\n            </div>\n            <div className=\"mdc-notched-outline__trailing\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    [].map.call(document.querySelectorAll(\".mdc-text-field\"), function(el) {\n      return new MDCTextField(el);\n    });\n  }\n}\n\nexport default InputField;\n","import React, { PureComponent } from \"react\";\nimport { MDCCheckbox } from \"@material/checkbox\";\n\nclass Checkbox extends PureComponent {\n  state = {};\n  render() {\n    return (\n      <div>\n        <div className=\"mdc-form-field\">\n          <div className=\"mdc-checkbox\">\n            <input\n              type=\"checkbox\"\n              className=\"mdc-checkbox__native-control\"\n              id=\"checkbox-1\"\n            />\n            <div className=\"mdc-checkbox__background\">\n              <svg className=\"mdc-checkbox__checkmark\" viewBox=\"0 0 24 24\">\n                <path\n                  className=\"mdc-checkbox__checkmark-path\"\n                  fill=\"none\"\n                  d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"\n                />\n              </svg>\n              <div className=\"mdc-checkbox__mixedmark\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    [].map.call(document.querySelectorAll(\".mdc-checkbox\"), function(el) {\n      return new MDCCheckbox(el);\n    });\n  }\n}\n\nexport default Checkbox;\n","import React, { PureComponent } from \"react\";\nimport Button from \"./elements/buttons\";\nimport InputField from \"./elements/input-fields\";\nimport \"./App.scss\";\nimport Checkbox from \"./elements/checkboxes\";\nimport { Link } from \"react-router-dom\";\n\nexport class Login extends PureComponent {\n  state = {};\n  handleClick = () => {\n    console.log(\n      \"Pressed!\",\n      this.emailLogin.input.value,\n      this.password.input.value\n    );\n  };\n  render() {\n    return (\n      <div className=\"body\">\n        <div className=\"container-fluid\">\n          <div className=\"top\">\n            <span className=\"title\">\n              Welcome to <b>CrowdML!</b>\n            </span>\n            <br />\n            <span className=\"text-muted\">Login to manage you account.</span>\n          </div>\n\n          <div className=\"fieldsAndButton\">\n            <div>\n              <InputField\n                ref={node => {\n                  this.emailLogin = node;\n                }}\n                type=\"text\"\n                text=\"Email Address\"\n              />\n            </div>\n            <div>\n              <div className=\"mt-2 link d-flex flex-row-reverse\">\n                <a\n                  className=\"forgotPassword\"\n                  style={{\n                    textDecoration: \"none\",\n                    color: \"grey\",\n                    marginBottom: 4\n                  }}\n                  href=\"http\"\n                >\n                  <span\n                    style={{\n                      borderBottom: 1 + \"px dashed\",\n                      fontSize: 13\n                    }}\n                    className=\"forgotPassword\"\n                  >\n                    Forgot Password?\n                  </span>\n                </a>\n              </div>\n              <InputField\n                ref={node => {\n                  this.password = node;\n                }}\n                type=\"password\"\n                text=\"Password\"\n              />\n            </div>\n            <div className=\"mt-3\">\n              <div className=\"bottom d-flex justify-content-between align-items-center\">\n                <div className=\"signup\" style={{ fontSize: 15 }}>\n                  <span className=\"text-muted\">Don't have an account? </span>\n                  <Link to=\"/signup\">Sign Up</Link>\n                </div>\n                <div className=\"button\">\n                  <Button handleClick={this.handleClick} name=\"Get Started\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class Signup extends PureComponent {\n  render() {\n    return (\n      <div>\n        <div className=\"body\">\n          <div className=\"container-fluid\">\n            <div className=\"top\">\n              <span className=\"title\">\n                Welcome to <b>CrowdML!</b>\n              </span>{\" \"}\n              <br />\n              <span className=\"m-1 text-muted\">\n                Enter your email to get started.\n              </span>\n            </div>\n            <div className=\"fieldsAndButton\">\n              <div className=\"input\">\n                <InputField text=\"Email Address\" type=\"text\" />\n              </div>\n              <div\n                style={{ marginLeft: -10 }}\n                className=\"mt-2 d-flex align-items-center\"\n              >\n                <Checkbox />\n                <span className=\"text-muted\">\n                  I agree to the{\" \"}\n                  <span style={{ borderBottom: 1 + \"px dashed\" }}>\n                    Terms and Conditions\n                  </span>\n                </span>\n              </div>\n              <div\n                style={{ marginTop: 10 + \"%\" }}\n                className=\"bottom d-flex justify-content-between align-items-center\"\n              >\n                <div>\n                  <span className=\"text-muted\">Already have an account? </span>\n                  <br />\n                  <Link to=\"/\">Login</Link>\n                </div>\n                <div className=\"d-flex flex-row-reverse\">\n                  <Button name=\"Sign Up\" />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class Main extends PureComponent {\n  render() {\n    return (\n      <div>\n        <h1>Working!</h1>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Login, Signup, Main } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.Fragment>\n      <Route path=\"/\" component={Login} exact />\n      <Route path=\"/signup\" component={Signup} />\n      <Route path=\"/main\" component={Main} />\n    </React.Fragment>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}